No process is allowed to monopolize the CPU
No process is allowed to directly control I/O devices
No process is allowed to access a main memory address outside of its allocated space

CPU
    There is a timer that sits in the background and checks every time slice, or quantum,
    This generates an interrupt which allows other programs to take over when needed
    Very small amount of time, like 10ms
    This stops any process from monopolizing the CPU
I/O
    No process is allowed to direction control I/O devices
    I/O instructions are privileged and can only be executed by OS
    There is a bit in the hardware to determine if the OS is running or the User process is running, and can be only changed by the OS
    This bit is set to 0 when the OS is running and to 1 when a user process is running.
    If an I/O instruction is used when the bit is set to 1 then an interrupt is generated
Memory
    Every address generated by a running process is checked to see if it is within the range allocated to the process
    if not then an interrupt is generated
Example of interrupts generated by a variety of actions
    Interrupt occurs due to completeion of output required for P9
    Interrupt occurs due to time slice expiring
    Interrupt occures due to a "read" instruction executed by P5
    Interrupt occurs due to P5 trying to divide by 0
Interrupts drive the way things are done by the Operating System

QUIZ QUESTIONS LAST YEAR
    Can you think of an instruction that is not an I/O that will generate an interrupt if a use process atempts to execute it?
        NOT ONE -> Trying to access memory that is outside of the processes allocated space
        Halt would be an interrupt instruction
        Read/Write
        Completion of Input
        Any privleged instruction

What is a Process?
    A program that is running.
    Once the program is put into main memory it becomes a processes
    It is an entity that the OS manages, and provides resources for it
        Resources - files, printers, communication, memory, CPU, OS data structures
    The process has a status as well
        Status - Contents of: Program Counter, Other CPU Registers
        These values are stored by the OS, in the OS structure for that process
Programs and Processes
    A program is an executable file on disk. Passive.
    A process is a set of instructions being executed. Active.
    One program and two processes. P1 and P2 are processes executing the same set of instructions
    The program text (instructions) is shared by them.
    P1 and P2 each have their own resources and statuses
    They're both separate entities the OS must manage
Process Control Block/ Process descriptor
    A data structure where the OS stores informations about each process
        If your program starts 5 processes, then there will be one of these for EACH processes
    The information is needed to restart the process when it gets the CPU
    1. Process ID, parent process ID, children processes IDs
    2. Process state -- ready, waiting, suspended
    3. Contents of CPU registers -- program counter, stack pointers, etc.
    4. Memory management info -- limit registers, page table
    5. CPU scheduling info -- priority
    6. Resources -- list of resources held and requested
    7. Threads -- information for each thread in the process
    The OS keeps all the process descriptors in a process table
Process Management
    The operating system manages processes by:
        Creating and deleting processes
        Suspending and restarting processes
        Assigning resources to processes
        Scheduling processes
        Synchronizing processes
        Provide communication between processes
Process States
    Ready: The process can be assigned a CPU is one were available
        Can be several processes
    Running: A CPU is executing instructions for that process
        One process per CPU
    Waiting/Blocked: The process is waiting for some activity to be completed before it can be considered ready
        Can be several processes

Changing Process States
    -->Ready  <---> Running |
    |---     Waiting     <---
    Ready -> Running : When the CPU is free and can be assigned
    Running -> Ready : when the process that is running uses its share of CPU time
    Running -> Waiting : when the process that is running needs to be completed
    Waiting -> Ready : When the event that the blocked process is waiting for is completed
    Other state changes are now allowed

Other Process States
    Suspended processes are taken out of main memory and their information is stored in a Process Control Block
    Suspended Ready : can go to ready, can come from Suspended waiting or Running
    Suspended Waiting : can go to waiting or suspended ready, can come from waiting