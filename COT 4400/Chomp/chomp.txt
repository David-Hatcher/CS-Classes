1. To solve the problem of the number of current game states given a number of squares, n, a maximum number of rows, r, and a maximum number of columns, c, it should be broken down into smaller subproblems. The most efficient way to break this down would be to find the number of valid game states for n, r, and c specifically, meaning that all columns and all rows have at least a single square in them, this value is actually the value where n = n-r-c+1, r = r-1, and c = c-1. Once you have this value for the number of game states at a specific size you can add the game states for smaller sizes with the same number of peices as well. The values to add would be the valid game states for the inputs n, r-1, c and n, r, c-1. However, these values will contain overlapping cases as the valid game states at n, r-1, c will include the valid game states of n, r-2, c, and n, r-1, c-1, while the valid game states at n, r, c-1 will include the valid game states at n, r-1, c-1 and n, r, c-2. Therefore, we must remove the overlapping game states between these two subproblems.

Thus, that any problem with arbirary inputs n, r, and c can be solved by finding the current number of game states for that specific size, n-r-c+1, r-1, c-1, as well as including the game states for the new subproblems with inputs of n, r-1, c and n, r, c-1 and removing the overlapping game states from n, r-1, c-1.


2.
Chomp(n,r,c) = Chomp(n,r-1,c) + Chomp(n,r,c-1) - Chomp(n,r-1,c-1) + Chomp(n-r-c+1,r-1,c-1)
or if n-r-c+1 < 0
Chomp(n,r,c) = Chomp(n,r-1,c) + Chomp(n,r,c-1) - Chomp(n,r-1,c-1)

3. Base Cases:
1, if r*c == n
1, if n == 1
0, if r*c < n

4.
Input: n, number of squares
Input: r, number of rows
Input: c, number of columns

chomp(n,r,c)
1    chompArr = array[n,r,c];
2    init chompArr to -1;
3    return getChompMemo(n,r,c);

getChompMemo(n,r,c):
1    if chompArr[n,r,c] == -1 then
2        if r*c < n then
3            chompArr[n,r,c] = 0;
4        else if r*c == n  || n == 1 then
5            chompArr[n,r,c] = 1;
6        else if n-r-c+1 < 0:
7            chompArr[n,r,c] = getChompMemo(n,r-1,c) + getChompMemo(n,r,c-1) - getChompMemo(n,r-1,c-1);
9        else:
10           chompArr[n,r,c] = getChompMemo(n,r-1,c) + getChompMemo(n,r,c-1) - getChompMemo(n,r-1,c-1) + getChompMemo(n-r-c+1,r-1,c-1);
11       end
12   end
13   return chompArr[n,r,c];


5.

The initial chomp algorithm will have be O(n*r*c) as this is the initialization cost and all other operations within that function are O(1)

For the getChompMemo algorithm, the algorithm will need to fill n*r*c slots in the worst case. As each of these slots will take a total O(1) to fill once the first base case is hit, it will come out to a total complexity of O(n*r*c) for the entirety of the algorithm.


6.

Input: n, number of squares
Input: r, number of rows
Input: c, number of columns
chomp(n,r,c)
    chompArr = array[n,r,c];
    init chompArr to 0;
    return getChompGS(n,r,c);

getChompItr(n,r,c):
for i = 1 to n step = 1 do
    for j = 1 to r step = 1 do
        for k = 1 to c step =  1 do
            if i == 1 OR j*k == i
                chompArr[i,j,k] = 1;
            else if j*k < n do
                chompArr[i,j,k] = 0;
            else if i-j-k+1 < 0
                chompArr[i,j,k] = chompArr[i,j-1,k] + chompArr[i,j,k-1] - chompArr[i,j-1,k-1];
            else:
                chompArr[i,j,k] = chompArr[i,j-1,k] + chompArr[i,j,k-1] - chompArr[i,j-1,k-1] + chompArr[i-j-k+1,j-1,k-1];
            end if
        end for
    end for
end for
return chompArr[n,r,c];


7.
The space complexity of this iterative algorithm could be improved relative to the memoized algorithm. As this algorithm iterates on three dimensions you will need the entirety of whatever 2D arrays you keep out of the 3 dimensions. However since at any point in time the furthest back you will need to access is i-j-k+1,j-1,k-1, you can eliminate any of the 2D r*c arrays that are further back then i-r-c+1. So basically if the you have the input of 15,5,5 on each of the i iterations you will only need to keep i-5-5+1 or i-9 arrays back. But, because you will be iterating through these arrays by the column and row, you will need to keep the entirety of those columns and rows in each of the i-9 arrays.
